name: Lint, Tests and Coverage

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'
  pull_request:

permissions:
  contents: write
  pull-requests: write
  checks: write

jobs:

  checkpypi:
    ## only check test PyPi on pull request, ignore any PR with NO_CLI_CHANGE in title
    if: github.event_name == 'pull_request' && !contains(github.event.pull_request.title, 'NO_CLI_CHANGE')
    needs: 
      - test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11"]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .
          pip install -r requirements-dev.txt
      
      - name: Check Project Version
        run: |
          VERSION=$(cat pyproject.toml | tomlq -r .project.version)
          TEST_VERSIONS=$(curl "https://test.pypi.org/pypi/cfncli/json" | jq -rc '.releases | keys')
          if echo "$TEST_VERSIONS" | jq -e --arg version "$VERSION" 'index($version)' > /dev/null; then
            echo "Error: Version $VERSION already exists in test.pypi.org"
            exit 1
          fi
          echo "Version $VERSION is available for publishing"

  publish-to-testpypi:
    name: Publish to TestPyPI
    needs:
      - test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11"]
    # run if push to main and commit does not contain NO_CLI_CHANGE. 
    # Note we only allow squash merges to main so only one commit to check
    if: github.ref == 'refs/heads/main' && !contains(github.event.head_commit.message, 'NO_CLI_CHANGE') 

    environment:
      name: testpypi
      url: https://test.pypi.org/project/cfncli

    permissions:
      id-token: write  # IMPORTANT: mandatory for trusted publishing

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .
          pip install -r requirements-dev.txt

      - name: Build package
        run: |
          make build

      - name: Publish distribution ðŸ“¦ to TestPyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/

  publish-to-pypi:
    name: Publish to PyPI
    needs:
      - test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11"]
    if: startsWith(github.ref, 'refs/tags/v')
    
    environment:
      name: pypi
      url: https://pypi.org/project/cfncli
    
    permissions:
      id-token: write
    
    steps:
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip

      - name: Download from TestPyPI and republish to PyPI
        run: |
          TAG_VERSION=${GITHUB_REF#refs/tags/v}
          pip download --index-url https://test.pypi.org/simple/ --no-deps cfncli==$TAG_VERSION
          
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: ./

  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11"]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install -r requirements-dev.txt
    
    - name: Check code formatting with Black
      run: |
        black --check --diff cfncli/
    
    - name: Run tests
      run: |
        pytest --junitxml=junit.xml --cov=cfncli --cov-report=xml --cov-report=html --cov-report=term

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          junit.xml
          coverage.xml
          htmlcov/
    
    - name: Publish test results
      uses: EnricoMi/publish-unit-test-result-action@v2
      if: always()
      with:
        files: junit.xml
    
    - name: Coverage comment
      uses: py-cov-action/python-coverage-comment-action@v3
      with:
        GITHUB_TOKEN: ${{ github.token }}